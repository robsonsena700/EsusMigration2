#!/usr/bin/env python3
"""
Script para testar a migra√ß√£o completa com arquivo CSV real
Testa se a corre√ß√£o do mapeamento INE est√° funcionando na pr√°tica
"""

import os
import sys
import psycopg2
import subprocess
from dotenv import load_dotenv
from pathlib import Path

# Carrega vari√°veis de ambiente
load_dotenv()

def get_db_connection():
    """Conecta ao banco de dados"""
    try:
        conn = psycopg2.connect(
            host=os.getenv('POSTGRES_HOST'),
            database=os.getenv('POSTGRES_DB'),
            user=os.getenv('POSTGRES_USER'),
            password=os.getenv('POSTGRES_PASSWORD'),
            port=os.getenv('POSTGRES_PORT', 5432)
        )
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

def count_records_before():
    """Conta registros na tabela antes da migra√ß√£o"""
    conn = get_db_connection()
    if not conn:
        return 0
    
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM public.tl_cds_cad_individual")
        count = cursor.fetchone()[0]
        cursor.close()
        conn.close()
        return count
    except Exception as e:
        print(f"‚ùå Erro ao contar registros: {e}")
        return 0

def get_sample_csv_file():
    """Encontra um arquivo CSV de exemplo para teste"""
    # Procura em m√∫ltiplos diret√≥rios
    search_dirs = [
        Path("D:/Robson/Projetos/Cascavel/datacsv"),
        Path("D:/Robson/Projetos/Cascavel"),
    ]
    
    csv_files = []
    
    for csv_dir in search_dirs:
        if csv_dir.exists():
            files = list(csv_dir.glob("*.csv"))
            csv_files.extend(files)
            print(f"üìÅ Encontrados {len(files)} arquivos em {csv_dir}")
    
    if not csv_files:
        print("‚ùå Nenhum arquivo CSV encontrado")
        return None
    
    # Prefere arquivos que sabemos que t√™m INEs v√°lidos
    preferred_files = ["Brito", "Barra Nova"]
    
    for preferred in preferred_files:
        for csv_file in csv_files:
            if preferred.lower() in csv_file.name.lower():
                return csv_file
    
    # Se n√£o encontrar os preferidos, usa o primeiro
    return csv_files[0]

def run_migration_test(csv_file):
    """Executa teste de migra√ß√£o com arquivo CSV"""
    print(f"üöÄ TESTE DE MIGRA√á√ÉO COMPLETA")
    print(f"=" * 50)
    print(f"üìÑ Arquivo CSV: {csv_file.name}")
    
    # Conta registros antes
    records_before = count_records_before()
    print(f"üìä Registros antes da migra√ß√£o: {records_before}")
    
    # Prepara comando de migra√ß√£o
    python_cmd = os.getenv('PYTHON_COMMAND', 'python')
    migrator_script = "migrator.py"
    
    # Comando para executar migra√ß√£o
    cmd = [
        python_cmd,
        migrator_script,
        "--file", str(csv_file),
        "--table-name", "public.tl_cds_cad_individual"
    ]
    
    print(f"üîß Executando: {' '.join(cmd)}")
    print(f"-" * 50)
    
    try:
        # Executa migra√ß√£o
        result = subprocess.run(
            cmd,
            cwd=os.getcwd(),
            capture_output=True,
            text=True,
            timeout=300  # 5 minutos timeout
        )
        
        print("üìã SA√çDA DA MIGRA√á√ÉO:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è ERROS/WARNINGS:")
            print(result.stderr)
        
        # Conta registros depois
        records_after = count_records_before()
        records_added = records_after - records_before
        
        print(f"-" * 50)
        print(f"üìä RESULTADO:")
        print(f"   üìä Registros antes: {records_before}")
        print(f"   üìä Registros depois: {records_after}")
        print(f"   ‚ûï Registros adicionados: {records_added}")
        
        if result.returncode == 0:
            print(f"   ‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            
            if records_added > 0:
                print(f"   üéØ {records_added} novos registros inseridos")
                return True
            else:
                print(f"   ‚ö†Ô∏è Nenhum registro foi inserido")
                return False
        else:
            print(f"   ‚ùå Migra√ß√£o falhou (c√≥digo: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout: Migra√ß√£o demorou mais de 5 minutos")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√£o: {e}")
        return False

def check_ine_mapping_in_db():
    """Verifica se os INEs foram mapeados corretamente no banco"""
    print(f"\nüîç VERIFICANDO MAPEAMENTO INE NO BANCO")
    print(f"=" * 50)
    
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # Verifica registros recentes com co_unidade_saude v√°lido
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(co_unidade_saude) as com_unidade,
                COUNT(DISTINCT co_unidade_saude) as unidades_distintas
            FROM public.tl_cds_cad_individual 
            WHERE co_unidade_saude IS NOT NULL
        """)
        
        result = cursor.fetchone()
        total, com_unidade, unidades_distintas = result
        
        print(f"üìä Registros com co_unidade_saude: {com_unidade}/{total}")
        print(f"üìä Unidades distintas: {unidades_distintas}")
        
        if com_unidade > 0:
            # Mostra algumas unidades mapeadas
            cursor.execute("""
                SELECT 
                    co_unidade_saude,
                    COUNT(*) as registros
                FROM public.tl_cds_cad_individual 
                WHERE co_unidade_saude IS NOT NULL
                GROUP BY co_unidade_saude
                ORDER BY registros DESC
                LIMIT 5
            """)
            
            print(f"\nüìã Top 5 unidades com mais registros:")
            for row in cursor.fetchall():
                unidade, count = row
                print(f"   üè• Unidade {unidade}: {count} registros")
            
            cursor.close()
            conn.close()
            return True
        else:
            print(f"‚ùå Nenhum registro com co_unidade_saude encontrado")
            cursor.close()
            conn.close()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar mapeamento: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print(f"üß™ TESTE COMPLETO DE MIGRA√á√ÉO COM CORRE√á√ÉO INE")
    print(f"=" * 60)
    
    # Verifica conex√£o com banco
    conn = get_db_connection()
    if not conn:
        print("‚ùå N√£o foi poss√≠vel conectar ao banco de dados")
        return False
    conn.close()
    print("‚úÖ Conex√£o com banco OK")
    
    # Encontra arquivo CSV
    csv_file = get_sample_csv_file()
    if not csv_file:
        print("‚ùå Nenhum arquivo CSV encontrado para teste")
        return False
    
    print(f"‚úÖ Arquivo CSV encontrado: {csv_file}")
    
    # Executa teste de migra√ß√£o
    migration_success = run_migration_test(csv_file)
    
    if migration_success:
        # Verifica mapeamento no banco
        mapping_success = check_ine_mapping_in_db()
        
        if mapping_success:
            print(f"\nüéâ TESTE COMPLETO: SUCESSO!")
            print(f"‚úÖ Migra√ß√£o executada com sucesso")
            print(f"‚úÖ Mapeamento INE -> co_unidade_saude funcionando")
            return True
        else:
            print(f"\n‚ö†Ô∏è TESTE PARCIAL: Migra√ß√£o OK, mas mapeamento com problemas")
            return False
    else:
        print(f"\n‚ùå TESTE FALHOU: Problemas na migra√ß√£o")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)